:numbered:
:author: Sidney Alves dos Santos Junior
:icons:
:experimental:
:stem:
:imagesdir: ../figs
:toc: left
:doctype: book
:source-highlighter: rouge
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Apêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

== Manipulando Pixels em uma Imagem ==

O objetivo da atividade é demonstrar um exemplo básico de processamento de imagens utilizando o OpenCV em Python.

O exercício está disponível em link:https://agostinhobritojr.github.io/tutorial/pdi/pixels.html[Capítulo 2. Manipulando pixels em uma imagem].

=== Região Negativa ===

Nessa atividade delimitamos uma área dada por dois pontos e essa área deve ter o negativo daquela região. Para executar, deve ser passado como argumento em linha de comando a imagem e quatro valores inteiros, onde os dois primeiros representam o ponto P1 que está mais a esquerda e acima que o ponto P2 que por sua vez está mais abaixo e a direita.

.Exemplo de comando de execução
----
python3 nome_arquivo.py caminho_imagem p1_x p1_y p2_x p2_y
----

Durante o processamento da imagem, iremos utilizá-la em tons de cinza, uma vez que iremos realizar a manipulação di pixel para negativo além de facilitar o manuseio da imagem por possuir somente um canal.

Abaixo temos como exemplo a forma de carregar uma imagem em tons de cinza.

.Carregando imagem em tons de cinza
[source,python,subs="+quotes"]
----
imagem = cv2.imread(caminho, cv2.IMREAD_GRAYSCALE)
----

Uma vez com a imagem, podemos realizar o processamento na imagem original sendo que eventuais modificações podem sobrescrever valores anteriores. Realizar uma cópia é interessante, pois modificações podem ser realizadas sem perder o conteúdo original.

Para obter o negativo, precisamos subtrair o valor de cada pixel da região de 255 que é o valor máximo, operação que visa transformar regiões claras em escuras e vice-versa.

Para cada pixel na linha e coluna entre os pontos P1 e P2 aplicamos a operação como mostrado no trecho de código abaixo.

.Negativo da imagem
[source,python,subs="+quotes"]
----
for linha in range(int(p1[0]), int(p2[0])):
    for coluna in range(int(p1[1]), int(p2[1])):
        imagem[linha, coluna] = 255 - imagem[linha, coluna]
----

Com esse processo realizado obtemos o seguinte resultado:

.Resultado 01
image::img01.png[Imagem 01, 400, 400]

Script disponível em: link:../scripts/pratica01.py[Manipulando Pixels em uma Imagem]

=== Inversão de Quadrantes ===

Para a segunda parte da prática temos como objetivo recortar a imagem em quatro quadrantes de tamanhos proporcionais e trocando suas posições, no caso as diagonais. Diferente da atividade danterios não é necessário passar mais argumentos além do caminho da imagem na linha de comando e assim como a ainterior a imagem estará em tons de cinza.

.Exemplo de comando de execução
----
python3 nome_arquivo.py caminho_imagem
----

Inicialmente, após o carregamento da imagem devemos delimitar o centro da imagem, para dividir os quadrantes similar ao plano cartesiano começando com Q1 como quadrante superior direito e os demais quadrantes sendo atribuídos no sentido anti-horário.

.Centro da Imagem
[source,python,subs="+quotes"]
----
limite_h = imagem.shape[0] // 2
limite_v = imagem.shape[1] // 2
----

Um observação importante é que ao separar o quadrante, uma cópia daquela parte da imagem deve ser feita. Pois caso não seja feita a cópia, qualquer alteração feita no quadrante será refletido na imagem original.

.Separação dos Quadrantes
[source,python,subs="+quotes"]
----
q1 = imagem[:limite_h, :limite_v].copy()
q2 = imagem[:limite_h, limite_v:].copy()
q3 = imagem[limite_h:, :limite_v].copy()
q4 = imagem[limite_h:, limite_v:].copy()
----

Agora basta somente inverte os quadrantes em relação as diagonais.

.Troca dos Quadrantes
[source,python,subs="+quotes"]
----
imagem[:limite_h, :limite_v] = q4  # Q4 -> Q1
imagem[:limite_h, limite_v:] = q3  # Q3 -> Q2
imagem[limite_h:, :limite_v] = q2  # Q2 -> Q3
imagem[limite_h:, limite_v:] = q1  # Q1 -> Q4
----

Com esse processo realizado obtemos o seguinte resultado:

.Resultado 02
image::img02.png[Imagem 01, 400, 400]

Script disponível em: link:../scripts/pratica01.py[Inversão de Quadrantes]