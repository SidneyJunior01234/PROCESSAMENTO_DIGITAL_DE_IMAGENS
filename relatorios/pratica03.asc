:numbered:
:author: Sidney Alves dos Santos Junior
:icons:
:experimental:
:stem:
:imagesdir: ../figs
:toc: left
:doctype: book
:source-highlighter: rouge
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Apêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

== Esteganografia em imagens digitais ==

O objetivo da atividade é recuperar uma imagem que passou pelo processo da esteganografia que é uma área da criptografia. A ideia é esconder uma imagem secreta einformáticam outra (imagem portadora), mas sem alterar significativamente a aparência da portadora. Descartando-se uma quantidade de bits menos significativos de cada pixel, suficiente para não perder a qualidade visual da imagem.

O exercício está disponível em link:https://agostinhobritojr.github.io/tutorial/pdi/bitplanes.html[Capítulo 10. Decomposição de imagens em planos de bits].

A imagem que deve ser recuperada está escondida dentro da:

image::desafio_esteganografia.png[desafio 01]

Algo importante é que a imagem escondida e a que guarda essa informação devem ser do mesmo tamanho, logo é criada uma imagem com com valores de pixels igual a 0 com o mesmo tamanhos da utilizada. Após isso é usado a estrutur abaixo:

.Recuperação da Imagem
[source,python,subs="+quotes"]
----
for linha in range(img_info_esc.shape[0]):
    for coluna in range(img_info_esc.shape[1]):
        for canal in range(3):
            pixel_esc = img_info_esc[linha, coluna, canal] & ((1 << NBITS) - 1)
            img_rec[linha, coluna, canal] = pixel_esc << (8 - NBITS)
----

É percorrido os pixels da imagem em seus 3 canais (RGB), uma vez que estamos trabalhando com imagens coloridas. realizamos a extração dos bits menos significativos por meio da mas

.Extração dos Bits Menos Significativos 
[source,python,subs="+quotes"]
----
pixel_esc = img_info_esc[linha, coluna, canal] & ((1 << NBITS) - 1)
----

O trcho baixo acessa o valor do pixel em um canal;
----
img_info_esc[linha, coluna, canal]
----

Logo após uma máscara inária isola os NBITS menos significativos, sua importância se dá por conter a informação da imagem oculta;
----
((1 << NBITS) - 1)
----

Com isso os pixels são movidos para a posição correta, deslocando os bits extraídos para os bits mais significativos e armazenando na imagem de recuperação;
----
img_rec[linha, coluna, canal] = pixel_esc << (8 - NBITS)
----

A imagem obtida por esse processo é:

image::imagem_recuperada.png[recuperada 01]

Script disponível em: link:../scripts/pratica04.py[Esteganografia em imagens digitais]

Para executar o programa utilize o comando:
.Exemplo de comando de execução
----
python3 nome_arquivo.py caminho_imagem
----