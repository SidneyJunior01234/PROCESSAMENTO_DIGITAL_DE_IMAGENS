:numbered:
:author: Sidney Alves dos Santos Junior
:icons:
:experimental:
:stem:
:imagesdir: ../figs
:toc: left
:doctype: book
:source-highlighter: rouge
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Apêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

== Preenchendo regiões ==

Nessa atividade prática, o objetivo é realizar a contagem de objetos e é necessário identificar os aglomerados de pixels associados a cada objeto.

O exercício está disponível em link:https://agostinhobritojr.github.io/tutorial/pdi/labeling.html[Capítulo 11. Preenchendo regiões].

=== Quantidade de Objetos Superior a 255 ===

Tomando como base o programa link:https://agostinhobritojr.github.io/tutorial/pdi/exemplos/labeling.cpp[labeling.cpp] disponível na página do exercício, temos a informação que armazenamos a informação de objetos em 1 byte (8 bits)

Uma vez que um novo objeto é encontrado e excede o valor 255, um objeto previamente rotulado pode acabar sendo envolvido ,causando uma contagem incorreta devido a ocorrência de uma sobreposição.

Como solução pode ser feita a conversão para um tipo de dado maior. Como estamos utilizando Python e suas bibliotecas, temos como opção usar o NumPy que oferecem arrays de até 32 bits, permitindo rotular uma maior quantidade de objetos.

=== Contagem de Bolhas ===

Um aprimoramento deve ser feito no programa de contagem disponível na página do exercício.

A imagem utilizada será:

.Bolhas
image::../imagens/bolhas.png[Bolhas 01]

Primeiramente os objetos das bordas serão removidos, com isso temos as funções responsáveis pro esse processo. Elas varrem as bordas e com uso do floodfill, preenchemos o objeto com a mesma cor do plano de fundo.

.Remover Bordas
[source,python,subs="+quotes"]
----
def limpa_borda_sup(img, width:int, height:int):
    p = [0,0]
    for j in range(width):
        if img[0,j] == 255:
            p[0] = j
            p[1] = 0
            cv2.floodFill(img, None, p, 0)

def limpa_borda_inf(img, width:int, height:int):
    p = [0,0]
    for j in range(width):
        if img[height-1,j] == 255:
            p[0] = j
            p[1] = height-1
            cv2.floodFill(img, None, p, 0)

def limpa_borda_esq(img, width:int, height:int):
    p = [0,0]
    for i in range(height):
        if img[i,0] == 255:
            p[0] = 0
            p[1] = i
            cv2.floodFill(img, None, p, 0)

def limpa_borda_dir(img, width:int, height:int):
    p = [0,0]
    for i in range(height):
        if img[i,width-1] == 255:
            p[0] = width-1
            p[1] = i
            cv2.floodFill(img, None, p, 0)

def limpa_bordas(img, width:int, height:int):
    width = imagem.shape[0]
    height = imagem.shape[1]
    p = [0,0]

    limpa_borda_sup(img, width, height)
    limpa_borda_inf(img, width, height)
    limpa_borda_esq(img, width, height)
    limpa_borda_dir(img, width, height)

    return img
----

Após limpar as bordas, o fundo da imagem tem sua cor alterada com o floodfill de forma que não ocorra problema ao identificar a borda esquerda do buraco de uma bolha.

Agora é realizada a contagem de bolhas. Optei por iniciar pelas bolhas com furos, onde ao encontrar uma bolha, o algoritmo irá percorrer os pixels até encontrar um buraco e o preencher com a cor de fundo, além de mudar a cor dessa bolha.

.Contahem de Bolhas com Buracos
[source,python,subs="+quotes"]
----
for i in range(width):
        for j in range(height):
            if img[i, j] == 0:
                bolhas_c_furos += 1
                p[0] = j
                p[1] = i
                cv2.floodFill(img, None, p, cor_fundo)
                if img[i, j-1] == 255:
                    p[0] = j
                    p[1] = i-1
                    cv2.floodFill(img, None, p, cor_fundo+75)
----

Por último é feita a contagem de bolhas sem buracos e elas também tem a sua cor alterada.

.Contahem de Bolhas sem Buracos
[source,python,subs="+quotes"]
----
for i in range(width):
        for j in range(height):
            if img[i, j] == 255:
                bolhas_s_furos += 1
                p[0] = j
                p[1] = i
                cv2.floodFill(img, None, p, cor_fundo-75)
----

Com esse processo obtemos:

image::img03.png[imagem 02]

Script disponível em: link:../scripts/pratica05.py[Contagem de Bolhas]

Para executar o programa utilize o comando:
.Exemplo de comando de execução
----
python3 nome_arquivo.py caminho_imagem
----