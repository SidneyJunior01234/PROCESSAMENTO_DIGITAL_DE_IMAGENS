:numbered:
:author: Sidney Alves dos Santos Junior
:icons:
:experimental:
:stem:
:imagesdir: ../figs
:toc: left
:doctype: book
:source-highlighter: rouge
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Apêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

== Manipulação de histogramas ==

O objetivo da atividade é demonstrar o tratamento de histogramas na avaliação de características de uma imagem. Além disso a prática irá explorar o uso dos recursos de captura de vídeo disponível para o uso de câmeras no OpenCV.

O exercício está disponível em link:https://agostinhobritojr.github.io/tutorial/pdi/histograma.html[Capítulo 12. Manipulação de histogramas].

=== Equalização de Histograma ===

A equalização de histograma muda a distribuição dos valores de ocorrência do próprio histograma, permitindo acentuar detalhes que não foram possiveis visualizar anterior a equalização.

Inicialmente seleionamos a câmera que será aberta no programa. Estou utilizando a câmera do Smartphone pelo aplicativo do DroidCam.

.Seleção de Câmera
[source,python,subs="+quotes"]
----
cap = cv2.VideoCapture(0)
----

Por se tratar de imagens dinâmicas, cada frame deve ser carregado e para cada um deles é realizada a conversão dessa imagem para tons de cinza. Após a conversão é utilizado o método equalizeHist( imagem ) que realiza a equalização.

.Equalização do Frame
[source,python,subs="+quotes"]
----
while True:
    ret, frame = cap.read()
    if not ret:
        break

    frame_cinza = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    frame_equalizado = cv2.equalizeHist(frame_cinza)
    imagem_final = np.concatenate(([frame_cinza, frame_equalizado]), axis=1)
    cv2.imshow("Imagem Equalizada", imagem_final)

    
    if cv2.waitKey(30) & 0xFF == 27:
        break

cap.release()
cv2.destroyAllWindows()
----

Nesse trecho de código temos no final a condição de fechar a aplicação onde 0xFF == 27 é referente a tecla Esc. Além de utilizar o numpy para concatenar a imagem em tons de cinza e a equalizada em uma só.

temos como resultado:

image::equalizacao.png[equaliza 01]

Script disponível em: link:../scripts/pratica06.py[Equalização de Histograma]

Para executar o programa utilize o comando:
.Exemplo de comando de execução
----
python3 nome_arquivo.py
----

=== Motion Detector ===

Essa atividade prática tem como objetivo, realizar a detecção de movimento de objetos com o uso da diferença entre histogramas dado um limiar definido previamente.

Definimos inicialmente três variáveis que utilizaremos durante o programa, onde elas são responsáveis pelo limiar para detectar movimento, intervalo de agrupamento, o intervalo de intensidade dos pixels e o armazenamento do histograma anterior.

.Definição das Variáveis
[source,python,subs="+quotes"]
----
THRESHOLD = 0.8
NBINS = 64  
RANGES = [0, 256]
HIST_ANTERIOR = None
----

Ao selecionar a câmera que será utilizada, é definida a resolução da câmera e da janela de ixibição para 640x480. Como se trata de uma prática, não é necessário resoluções maiores, pois ao utilizar maiores resoluções o processamento também irá aumentar.

.Configurando Tela de Exibição
[source,python,subs="+quotes"]
----
cap = cv2.VideoCapture(0)

if not cap.isOpened():
    print("Nenhuma Câmera Encontrada.")
    sys.exit(1)

cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

cv2.namedWindow('Motion Detector', cv2.WINDOW_NORMAL)
cv2.resizeWindow('Motion Detector', 640, 480)
----

Como a aplicação utiliza de imagens em tempo real, cada frame deve ser processado e para cada um deles há a conversão de cores para tons de cinza. Com isso o histograma é calculado e normalizado entre 0 e 1, para que seja realizada a diferença entre o histograma atual e o anterior. Quando a diferença é menor que o limiar, é enviada uma mensagem como alarme de movimento por meio do print.

.Configurando Tela de Exibição
[source,python,subs="+quotes"]
----
while True:
    ret, frame = cap.read()
    if not ret:
        break

    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    hist = cv2.calcHist([gray_frame], [0], None, [NBINS], RANGES)
    cv2.normalize(hist, hist, 0, 1, cv2.NORM_MINMAX)

    if HIST_ANTERIOR is not None:
        difference = cv2.compareHist(HIST_ANTERIOR, hist, cv2.HISTCMP_CORREL)
        if difference < THRESHOLD:
            print("Alarme: Movimento detectado!")

    HIST_ANTERIOR = hist.copy()
    cv2.imshow("Motion Detector", frame)

    if cv2.waitKey(30) & 0xFF == 27:
        break

cap.release()
cv2.destroyAllWindows()
----

.Resultado Motion Detection
video::5WtiNby3P_w[Motion Detection]

Caso o vídeo não seja carregado, acesse o link: link:https://youtu.be/5WtiNby3P_w[Motion Detection]

Script disponível em: link:../scripts/pratica07.py[Motion Detector]

Para executar o programa utilize o comando:
.Exemplo de comando de execução
----
python3 nome_arquivo.py
----