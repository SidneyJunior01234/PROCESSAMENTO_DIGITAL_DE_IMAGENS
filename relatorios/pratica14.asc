:numbered:
:author: Sidney Alves dos Santos Junior
:icons:
:experimental:
:stem:
:imagesdir: ../figs
:toc: left
:doctype: book
:source-highlighter: rouge
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Apêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

== Detecção de Bordas com o Algoritmo de Canny ==

Para essa prática, será necessário conhecer e aplicar o algoritmo de Canny, que é reconhecido como um dos mais rápidos e mais eficientes para a detecção de bordas.

O exercício está disponível em link:https://agostinhobritojr.github.io/tutorial/pdi/canny.html[Capítulo 19. Detecção de bordas com o algoritmo de Canny].

=== Canny e a arte com pontilhismo ===

O pontilhismo é uma técnica artística impressionista onde o quadro é pintado usando apenas pontos. O pioneiro nessa técnica foi link:https://en.wikipedia.org/wiki/Georges_Seurat[Georges Seurat] e alguns de seus trabalhos podem ser encontrados em link:https://georgesseurat.org/[georgesseurat.org]

O código desenvolvido tem como base os códigos canny.cpp e pontilhismo.cpp disponível na página do exercício. Com isso é necessário os seguintes trechos:

.Variáveis Essenciais
[source,python,subs="+quotes"]
----
# Constantes para pontilhismo
PASSO = 5
DESVIO = 3
RAIO_INICIAL = 5

# Configuração inicial do Canny
CANNY_MINIMO = 50
CANNY_MAXIMO = 150
----

Essas variáveis são responsáveis pelos ajustes dos parâmetros das técnicas que serão mescladas no exercício. Além disso, para o uso do pontilhismo é necessário a criação de uma máscara e a função abaixo é responsável pela criação.

.Criação da Máscara
[source,python,subs="+quotes"]
----
def gerar_mascara_pontilhismo(imagem):
    altura, largura = imagem.shape
    mascara = np.zeros((altura, largura), dtype=np.uint8)

    faixa_x = [(i * PASSO + PASSO // 2) for i in range(altura // PASSO)]
    faixa_y = [(i * PASSO + PASSO // 2) for i in range(largura // PASSO)]

    random.seed()
    random.shuffle(faixa_x)

    for x in faixa_x:
        random.shuffle(faixa_y)
        for y in faixa_y:
            desviado_x = x + random.randint(-DESVIO, DESVIO)
            desviado_y = y + random.randint(-DESVIO, DESVIO)

            desviado_x = max(0, min(altura - 1, desviado_x))
            desviado_y = max(0, min(largura - 1, desviado_y))

            cinza = imagem[desviado_x, desviado_y]
            cv2.circle(mascara, (desviado_y, desviado_x), RAIO_INICIAL, int(cinza), -1, lineType=cv2.LINE_AA)

    return mascara
----

Apósa criação da máscara, o algoritmo de canny é aplicado para detectar bordas da imagem original e assim poder desenhar os circulos na máscara.

.Detecção de Bordas e Adição de Circulos na Máscara
[source,python,subs="+quotes"]
----
def adicionar_bordas_canny_na_mascara(imagem, mascara):
    altura, largura = imagem.shape

    for fator_raio in range(1, 4):
        limite_inferior = fator_raio * CANNY_MINIMO
        limite_superior = fator_raio * CANNY_MAXIMO

        bordas = cv2.Canny(imagem, limite_inferior, limite_superior)

        for x in range(altura):
            for y in range(largura):
                if bordas[x, y] > 0:
                    cinza = int(imagem[x, y])
                    raio = max(1, RAIO_INICIAL - fator_raio)
                    cv2.circle(mascara, (y, x), raio, int(cinza), -1, lineType=cv2.LINE_AA)

    return mascara
----

Como a técnica é aplicada em imagens em tons de cinza, uma função auxiliar foi criada para aplicar a máscara a cada canal de cor, aplicando o método do pontilhosmo em imagens coloridas.

.Aplicar Máscara em Imagens Coloridas
[source,python,subs="+quotes"]
----
def aplicar_mascara_na_imagem_colorida(imagem_colorida, mascara):
    # Converte a máscara para float32
    mascara_normalizada = mascara.astype(np.float32) / 255.0
    resultado = np.zeros_like(imagem_colorida, dtype=np.uint8)
    
    # Aplica a máscara em cada canal
    for c in range(3):  # Para os canais B, G, R
        resultado[:, :, c] = (imagem_colorida[:, :, c].astype(np.float32) * mascara_normalizada).astype(np.uint8)
    
    return resultado
----

Com isso ao aplicar o algoritmo modificado na imagem da lena.png teremos.

.Imagem Original
image:lena.png[imagem 01]

.Resultado
image:lena_pont.png[imagem 02]

Para executar o programa utilize o comando:
.Exemplo de comando de execução
----
python3 nome_arquivo.py caminho_imagem
----
