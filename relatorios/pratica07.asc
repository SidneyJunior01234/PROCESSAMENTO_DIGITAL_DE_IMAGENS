:numbered:
:author: Sidney Alves dos Santos Junior
:icons:
:experimental:
:stem:
:imagesdir: ../figs
:toc: left
:doctype: book
:source-highlighter: rouge
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Apêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

== Filtragem no domínio espacial II - TiltShift ==

A atividade tem como objetivo, explorar mais sobre filtragem espacial. O objetivo é realizar a simulação do efeito da técnica de fotografia tilt-shift.

A técnica fotográfica de tilt-shift envolve o uso de deslocamentos e rotações entre a lente e o plano de projeção (onde fica filme fotográfico ou o sensor da câmera) de modo a desfocar seletivamente regiões do assunto.

O exercício está disponível em link:https://agostinhobritojr.github.io/tutorial/pdi/tiltshift.html[Capítulo 15. Filtragem no domínio espacial II - TiltShift].

=== Aplicação do TiltShift em Imagens ===

Tomando como base o programa disponível na página do exercício, três ajustes devem ser realizados:

1. um ajuste para regular a altura da região central que entrará em foco;
2. um ajuste para regular a força de decaimento da região borrada;
3. um ajuste para regular a posição vertical do centro da região que entrará em foco. Finalizado o programa, a imagem produzida deverá ser salva em arquivo.

O programa tem início com a definição das variáveis que serão utilizadas durante o programa.

.Variáveis e Funções Essenciais
[source,python,subs="+quotes"]
----
ALTURA_MAX_SLIDER = 100
DECAI_MAX_SLIDER = 20
CENTRO_MAX_SLIDER = 100
----

Com as variáveis declaradas, temos a a função responsável por aplicar o efeito. Nela temos inicialmente o ajuste da posição dos sliders e a escala para os valroes reais.

.Aplicação do TiltShift - Ajuste dos Sliders
[source,python,subs="+quotes"]
----
def aplicar_tilt_shift(valor=0):
    altura = cv2.getTrackbarPos("Altura do Foco", "Tilt-Shift") / ALTURA_MAX_SLIDER
    decaimento = cv2.getTrackbarPos("Decaimento do Desfoque", "Tilt-Shift")
    centro = cv2.getTrackbarPos("Centro Vertical", "Tilt-Shift") / CENTRO_MAX_SLIDER
    
    altura_imagem, largura_imagem = imagem.shape[:2]
    centro_y = int(altura_imagem * centro)
    altura_foco = int(altura_imagem * altura)
----

Após temos a criação da máscara que dá o efeito de foco.

.Aplicação do TiltShift - Máscara de Foco
[source,python,subs="+quotes"]
----
    mascara = np.zeros((altura_imagem, largura_imagem), dtype=np.float32)
    mascara[max(0, centro_y - altura_foco // 2):min(altura_imagem, centro_y + altura_foco // 2), :] = 1
----

Temos o ajuste do decaimento, que deve ser ajustado para a função de desfoque Gaussiano. Com isso é feita a combinação da imagem real com a borrada.

.Aplicação do TiltShift - Combinação das Imagens
[source,python,subs="+quotes"]
----
    if decaimento < 1:
        decaimento = 1
    elif decaimento % 2 == 0:
        decaimento += 1
    
    mascara = cv2.GaussianBlur(mascara, (decaimento, decaimento), sigmaX=decaimento, sigmaY=decaimento)
    
    global resultado
    resultado = (imagem * mascara[..., np.newaxis] + imagem_borrada * (1 - mascara[..., np.newaxis])).astype(np.uint8)
    cv2.imshow("Tilt-Shift", resultado)
----

Agora ajustes devem ser realizados para a janela de exibição, logo são criados três sliders e a exibição em loop, pois os slider funcionam semelhante a eventos.

.Exibição
[source,python,subs="+quotes"]
----
cv2.namedWindow("Tilt-Shift")
cv2.createTrackbar("Altura do Foco", "Tilt-Shift", 50, ALTURA_MAX_SLIDER, aplicar_tilt_shift)
cv2.createTrackbar("Decaimento do Desfoque", "Tilt-Shift", 10, DECAI_MAX_SLIDER, aplicar_tilt_shift)
cv2.createTrackbar("Centro Vertical", "Tilt-Shift", 50, CENTRO_MAX_SLIDER, aplicar_tilt_shift)

cv2.imshow("Tilt-Shift", resultado)
aplicar_tilt_shift()

while True:
    tecla = cv2.waitKey(1) & 0xFF
    if tecla == ord('s'):
        cv2.imwrite("resultado_tiltshift.jpg", resultado)
        print("Imagem salva como resultado_tiltshift.jpg")
        break
    elif tecla != 255:
        break

cv2.destroyAllWindows()
----

.Resultado do Aplicação do TiltShift em Imagens
image:resultado_tiltshift.jpg[imagem 01]

.Demonstração de uso do programa
video::n3aeDtqdtTE[Aplicação do TiltShift em Imagens]

Caso o vídeo não seja carregado, acesse o link: link:https://youtu.be/n3aeDtqdtTE[Aplicação do TiltShift em Imagens]

Script disponível em: link:../scripts/pratica10.py[Aplicação do TiltShift em Imagens]

Para executar o programa utilize o comando:
.Exemplo de comando de execução
----
python3 nome_arquivo.py caminho_imagem
----

=== Aplicação do TiltShift em Vídeos ===

Seguindo a ideia da aplicação anterior, deve-se aplicar o TiltShift em um vídeo, ou seja, aplicar frame por frame. Mas alguns ajustes foram feitos como a função de ajuste de parâmetros que é a aplicação para uma imagem, sendo que os parâmetros são salvos para aplicar ao vídeo ao pressionar a tecla stem:[S].

.Ajuste de Parâmetros
[source,python,subs="+quotes"]
----
def ajustar_parametros(imagem_path):
    imagem = cv2.imread(imagem_path)
    if imagem is None:
        print("Erro ao abrir a imagem.")
        return None, None, None

    cv2.namedWindow("Ajustar Parâmetros")
    cv2.createTrackbar("Altura do Foco", "Ajustar Parâmetros", 50, ALTURA_MAX_SLIDER, lambda x: None)
    cv2.createTrackbar("Decaimento do Desfoque", "Ajustar Parâmetros", 10, DECAI_MAX_SLIDER, lambda x: None)
    cv2.createTrackbar("Centro Vertical", "Ajustar Parâmetros", 50, CENTRO_MAX_SLIDER, lambda x: None)

    while True:
        altura_foco = cv2.getTrackbarPos("Altura do Foco", "Ajustar Parâmetros") / ALTURA_MAX_SLIDER
        decaimento = cv2.getTrackbarPos("Decaimento do Desfoque", "Ajustar Parâmetros")
        centro = cv2.getTrackbarPos("Centro Vertical", "Ajustar Parâmetros") / CENTRO_MAX_SLIDER

        imagem_tiltshift = aplicar_tilt_shift(imagem, altura_foco, decaimento, centro)

        cv2.imshow("Ajustar Parâmetros", imagem_tiltshift)

        # Pressione 's' para salvar os parâmetros e sair
        if cv2.waitKey(1) & 0xFF == ord('s'):
            break

    cv2.destroyAllWindows()
    return altura_foco, decaimento, centro
----

E por fim a função que processa o vídeo que configura o arquivo de vídeo de saída com as dimensões do arquivo original, taxa de quadros (fps) e o codec da extensão mp4.

.Processar Vídeo - Configurando arquivo de saída de vídeo
[source,python,subs="+quotes"]
----
def processar_video(input_video_path, output_video_path, altura_foco, decaimento, centro):
    cap = cv2.VideoCapture(input_video_path)
    if not cap.isOpened():
        print("Erro ao abrir o vídeo.")
        return

    fps = cap.get(cv2.CAP_PROP_FPS)
    largura = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    altura = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_video_path, fourcc, fps, (largura, altura))
----

Após configurar basta somente aplicar o efeito, sendo que realizamos o descarte de alguns quadros, cuja quantidade foi definida juntamente com as variáveis.

.Definição das Variáveis
[source,python,subs="+quotes"]
----
ALTURA_MAX_SLIDER = 100
DECAI_MAX_SLIDER = 20
CENTRO_MAX_SLIDER = 100
DESC_QUADROS = 10
----

Com isso basta contar os quadros que ao chegar no valor de DESC_QUADROS, utiliza o frame para o vídeo de saída.

.Processar Vídeo - Descarte de quadros
[source,python,subs="+quotes"]
----
    contador = 0
        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                break

            if contador >= DESC_QUADROS:
                contador = 0
                quadro_tiltshift = aplicar_tilt_shift(frame, altura_foco, decaimento, centro)
                out.write(quadro_tiltshift)
                cv2.imshow("Tilt-Shift", quadro_tiltshift)

            contador += 1
            if cv2.waitKey(1) & 0xFF == 27:
                break

        cap.release()
        out.release()
        cv2.destroyAllWindows()
        print(f"Vídeo processado salvo como '{output_video_path}'.")
----

Segue um exemplo de uso do programa:

.Uso do Programa
video::IAQhmSDvwJ8[Uso do Programa]

Caso o vídeo não seja carregado, acesse o link: link:https://youtu.be/IAQhmSDvwJ8[Uso do Programa TiltShift Aplicado a Vídeos]

.Resultado da Aplicação
video::KQ2BLsfe36I[Resultado TiltShift]

Caso o vídeo não seja carregado, acesse o link: link:https://youtu.be/KQ2BLsfe36I[Resultado TiltShift]

Script disponível em: link:../scripts/pratica11.py[Aplicação do TiltShift em Vídeos]

Para executar o programa utilize o comando:
.Exemplo de comando de execução
----
python3 nome_arquivo.py caminho_imagem caminho_video
----