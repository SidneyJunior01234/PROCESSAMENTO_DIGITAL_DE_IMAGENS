:numbered:
:author: Sidney Alves dos Santos Junior
:icons:
:experimental:
:stem:
:imagesdir: ../figs
:toc: left
:doctype: book
:source-highlighter: rouge
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Apêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

== Serialização de dados em ponto flutuante via FileStorage ==

Essa prática tem como objetivo armazenar e recuperardados em ponto flutuante codificado em um arquivo YAML. Onde uma matriz com pixels no formato float deve ser armazenada, alem de gerar uma imagem PNG para que possamos co.

O exercício está disponível em link:https://agostinhobritojr.github.io/tutorial/pdi/filestorage.html[Capítulo 5. Serialização de dados em ponto flutuante via FileStorage].

== Desenvolvimento ==

A atividade prática foi realizada em Python e há uma biblioteca disponível para manipulação de arquivos do tipo YML e YAML, caso não tenha disponível acesse link:https://pyyaml.org/wiki/PyYAMLDocumentation[PyYAML Documentation] para utilizar uma biblioteca similar.

Temos como objetivo criar um programa para gerar uma imagem com formato 256x256 pixels a partir de uma senoide com 4 períodos e amplitude igual a 127. Dada essas informações foram definidas as variáveis responsáveis por essas informações e os nomes dos arquivos.

.Variáveis
[source,python,subs="+quotes"]
----
SIDE = 256
PERIODOS = 4
AMPLITUDE = 127
ARQ_NOME_YML = f'senoide-{SIDE}.yml'
ARQ_NOME_PNG = f'senoide-{SIDE}.png'
GRAFICO = '../imagens/diferenca.png'
----

Com a equação dada por:

stem:[AMPLITUDE * sin({2 * pi * PERIODOS}/{SIDE})] + 128

Podemos gerar a imagem utilizado da estrutura que utiliza de dois laços para preencher os pixels.

.Gerando Imagem
[source,python,subs="+quotes"]
----
imagem = np.zeros((SIDE, SIDE), dtype=np.float32)
for linha in range(SIDE):
    for coluna in range(SIDE):
        imagem[linha, coluna] = AMPLITUDE * np.sin(2 * np.pi * PERIODOS * coluna / SIDE) + 128
----

Após isso a imagem é salva em YAML utilizando:

.Salvando Imagem em YAML
[source,python,subs="+quotes"]
----
with open(ARQ_NOME_YML, 'w') as f:
    yaml.dump({'mat': imagem.tolist()}, f)
----

Imagem disponível em link:../imagens/senoide-256.yml[senoide-256.yml]

Uma imagem em PNG também deve ser salva. Para isso deve ser feita a normalização dos dados para valores entre 0 até 255 no formato inteiro de 8 bits, que é dada pela estrutura:

.Gerando Imagem PNG
[source,python,subs="+quotes"]
----
cv2.normalize(data_yml, data_yml, 0, 255, cv2.NORM_MINMAX)
data_png = data_yml.astype(np.uint8)
cv2.imwrite(ARQ_NOME_PNG, data_png)
----

Com isso é obtida a seguinte imagem:

.Senoide-256.PNG
image::senoide-256.png[Senoide 01]

Para finalizar a atividade um gráfico de diferença entre os pixels da imagem YAML e a PNG deve ser gerado. Ao observar o gráfico observamos que os valores estão oscilando, isso se dá pela conversão de float para inteiro 8 bits, logo algumas informalçoes são perdidas ao converter a imagem de YAML para PNG.

.Diferença YML e PNG
image::diferenca.png[Diferença 01]

Script disponível em: link:../scripts/pratica03.py[Serialização de dados]

Para executar o programa utilize o comando:
.Exemplo de comando de execução
----
python3 nome_arquivo.py
----

Observação: Crie um diretório /imagens para que o gráfico seja salvo ou altere o caminho na variável GRAFICO.