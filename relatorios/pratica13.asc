:numbered:
:author: Sidney Alves dos Santos Junior
:icons:
:experimental:
:stem:
:imagesdir: ../figs
:toc: left
:doctype: book
:source-highlighter: rouge
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Apêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

== Filtragem no Domínio da Frequência ==

O objetivo da atividade é a remoção de ruidos e distorções de natureza periódica. Será utilizado a Transformada Discreta de Fourier (DFT), onde o filtro é uma matriz que possui o mesmo tamanho da imagem e que é multiplicada DFT da imagem, filtrando assim os causadores das distorções na imagem.

O exercício está disponível em link:https://agostinhobritojr.github.io/tutorial/pdi/dftfilter.html[Capítulo 17. Filtragem no Domínio da Frequência].

=== Filtro Homomórfico ===

O filtro homomórfico normaliza o brilho de uma imagem e aumenta o contraste simultâneamente, removendo assim o ruído multiplicativo que é o caso da iluminação e da refletância. 

Foram criadas três funções para auxiliar na aplicação, onde elas são:

.Troca de Quadrantes
[source,python,subs="+quotes"]
----
def swap_quadrants(image):
    h, w = image.shape[:2]
    cx, cy = w // 2, h // 2

    q0 = image[0:cy, 0:cx]
    q1 = image[0:cy, cx:w]
    q2 = image[cy:h, 0:cx]
    q3 = image[cy:h, cx:w]

    tmp = np.copy(q0)
    image[0:cy, 0:cx] = q3
    image[cy:h, cx:w] = tmp

    tmp = np.copy(q1)
    image[0:cy, cx:w] = q2
    image[cy:h, 0:cx] = tmp
----

Essa função é responsável por trocar os quadrantes diagonais, para que o espectro do filtro tenha seu centro no centro da imagem.

.Criar Filtro
[source,python,subs="+quotes"]
----
def criar_filtro_homomorfico(shape, cutoff=30, low_gain=0.5, high_gain=2.0):
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    filter = np.zeros((rows, cols), dtype=np.float32)

    for i in range(rows):
        for j in range(cols):
            distance = np.sqrt((i - center_y) ** 2 + (j - center_x) ** 2)
            filter[i, j] = (high_gain - low_gain) * (1 - np.exp(- (distance ** 2) / (2 * (cutoff ** 2)))) + low_gain

    planes = [filter, np.zeros_like(filter, dtype=np.float32)]
    return cv2.merge(planes)
----

Essa função é responsável por criar o filtro tomando como referência o dftfilter.cpp disponível na págia do exercício, esse filtro irá utilizar a DFT com um ajuste de parâmetros para obter um filtro melhor.

.Aplicar Filtro
[source,python,subs="+quotes"]
----
def filtro_homomorfico(image, cutoff=30, low_gain=0.5, high_gain=2.0):
    dft_M = cv2.getOptimalDFTSize(image.shape[0])
    dft_N = cv2.getOptimalDFTSize(image.shape[1])
    padded = cv2.copyMakeBorder(image, 0, dft_M - image.shape[0], 0, dft_N - image.shape[1],
                                cv2.BORDER_CONSTANT, value=0)

    # Garante que as matrizes sejam float32
    planes = [np.float32(padded), np.zeros_like(padded, dtype=np.float32)]
    complex_image = cv2.merge(planes)

    cv2.dft(complex_image, complex_image)
    swap_quadrants(complex_image)

    filter = criar_filtro_homomorfico(padded.shape, cutoff, low_gain, high_gain)
    complex_image = cv2.mulSpectrums(complex_image, filter, 0)

    swap_quadrants(complex_image)
    cv2.idft(complex_image, complex_image)

    planes = cv2.split(complex_image)
    result = planes[0]
    result = result[:image.shape[0], :image.shape[1]]

    return cv2.normalize(result, None, 0, 1, cv2.NORM_MINMAX)
----

Ainda tomando como base dftfilter.cpp, as funções anteriores são utilizadas para realizar a filtragem e obter o seguinte resultado.

.Imagem Original
image::lena_mod.png[Imagem1 01, 400, 400]

A imagem orinigal utilizada foi a da Lena.png onde foi adicionado manualmente um efeito de iluminação, onde a iluminação é maior do lado direito da imagem e diminui em direção à esquerda.

Com aplicação do filtro temos o seguinte resultado.

.Resultado
image::filtro_homo.png[Imagem2 01, 400, 400]

Script disponível em: link:../scripts/pratica13.py[Filtro Homomórfico]

.Exemplo de comando de execução
----
python3 nome_arquivo.py caminho_imagem
----

ou

.Exemplo de comando de execução
----
python nome_arquivo.py caminho_imagem
----