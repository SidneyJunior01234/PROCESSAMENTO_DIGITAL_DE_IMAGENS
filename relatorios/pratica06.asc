:numbered:
:author: Sidney Alves dos Santos Junior
:icons:
:experimental:
:stem:
:imagesdir: ../figs
:toc: left
:doctype: book
:source-highlighter: rouge
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Apêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

== Filtragem no domínio espacial I - Convolução ==

A atividade tem como objetivo, demonstrar a aplicação de filtros por meio de uso da convolução digital. Que permite que características de dada imagem sejam alterados de acordo com o filtro utilizado.

O exercício está disponível em link:https://agostinhobritojr.github.io/tutorial/pdi/convolucao.html[Capítulo 14. Filtragem no domínio espacial I - Convolução].

=== Comparação Entre Filtros Média ===

Para essa prática, inicialmente é difinida uma lista com os tamanhos dos filtros utilizados, além de duas funções que são responsáveis pela criação da máscara e a aplicação da mesma.

A função responsável pela criação da máscara utiliza o numpy para criar uma matriz com dimensões stem:[(N,N)] preenchida com valor stem:[{1}/{N*N}] para cada pixel.

Já a responsável pela aplicação da máscara, utiliza o filter2D do OpenCV que é responsável por aplicar a máscara. Ele recebe como argumento a imagem, a máscara e qual técnica utilizar para as bordas, uma vez que operando pelas bordas temos a opção de replicar os valores da borda, utilizar os valores como 0, entre outros.

.Variáveis e Funções Essenciais
[source,python,subs="+quotes"]
----
TAMANHOS = [3, 11, 21]

def criar_mascara(tamanho):
    mascara = np.ones(shape=(tamanho,tamanho), dtype=np.float32) / (tamanho*tamanho)
    return mascara

def aplicar_mascara(ymg, mascara):
    imagem_filtrada = cv2.filter2D(frame_cinza, -1, mascara, borderType=cv2.BORDER_REPLICATE)
    return imagem_filtrada
----

Utilizando a câmera, o frame é convertido para tons de cinza e sua dimensões são alteradas para que possa ser criada uma janela com a junção dos três filtros em aplicação.

O frame é utilizada para cada um dos filtros que são utilizados em sequência, assim como aplicados e adicionados em uma lista que no final do processo concatena as imagens em uma única imagem.

.Aplicação do Filtro no Vídeo
[source,python,subs="+quotes"]
----
while True:
    ret, frame = cap.read()
    if not ret:
        break
    
    frame_cinza = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    frame_cinza = cv2.resize(frame_cinza, (352, 288))
    resultados = []
    for tamanho in TAMANHOS:
        mascara = criar_mascara(tamanho)
        resultado_filtro = aplicar_mascara(frame_cinza, mascara)
        resultados.append(resultado_filtro)

    imagem_final = np.concatenate((resultados), axis=1)
    cv2.imshow("Mascaras 3x3 11x11 21x21", imagem_final)

    if cv2.waitKey(30) & 0xFF == 27:
        break

cap.release()
cv2.destroyAllWindows()
----

.Resultado da Aplicação dos Filtros Média
video::jgX0PS6GZBY[Aplicação de Filtros Média]

Caso o vídeo não seja carregado, acesse o link: link:https://youtu.be/jgX0PS6GZBY[Aplicação de Filtros Média]


Script disponível em: link:../scripts/pratica08.py[Comparação Entre Filtros Média]

Para executar o programa utilize o comando:
.Exemplo de comando de execução
----
python3 nome_arquivo.py
----

=== Efeito de Profundidade de Campo ===

Dado o vídeo link:https://agostinhobritojr.github.io/tutorial/pdi/figs/vasos720p.mp4[vasos720p.mp4] Este efeito é conhecido como profundidade de campo. Ele ocorre porque o conjunto de lentes não permite, para a abertura do diafragma, que todos os objetos em diferentes distâncias do plano focal sejam focados simultaneamente. O objetivo aplicar uma correção para o efeito seguindo os seguintes passos:

1. Capture um frame da cena do vídeo.

2. Converta o frame para tons de cinza.

3. Crie uma matriz para guardar os máximos dos laplacianos que serão calculados a seguir.

4. Aplique um filtro laplaciano de tamanho 3x3 pixels na imagem cinzenta.

5. Compare o resultado do filtro com a matriz de máximos e selecione aqueles que possuem um valor maior que o correspondente na matriz de máximos. Para os pixels selecionados, copie para a imagem de saída os pixels coloridos da imagem capturada.

6. Exiba a imagem de saída.

Inicialmente foi definido o filtro laplaciano e aplicado o processo para o primeiro frame do vídeo, assim já será possível obter uma matriz com os valores máximos do laplaciano e evitando erros durante as primeiras comparações.

.Aplicação inicial
[source,python,subs="+quotes"]
----
KERNEL_LAPLACIANO = np.array([
    [0, -1, 0],
    [-1, 4, -1],
    [0, -1, 0]
])

cap = cv2.VideoCapture(sys.argv[1])

if not cap.isOpened():
    print("Erro ao abrir o vídeo")
    sys.exit(1)

ret, frame = cap.read()
if not ret:
    print("Erro ao capturar o frame")
    sys.exit(1)

frame_cinza = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
max_laplaciano = np.zeros_like(frame_cinza, dtype=np.float32)
saida = np.zeros_like(frame)
----

Agora são definidas as configurações necessárias para gerar um vídeo, que representa o processo aplicado em cada frame. Precisamos das dimensões, a taxa de quadros (fps) e o codec de vídeo, que optei por utilizar o formato mp4.

.Configurações do Vídeo de Saída
[source,python,subs="+quotes"]
----
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps = cap.get(cv2.CAP_PROP_FPS)

fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter('resultado_vaso.mp4', fourcc, fps, (width, height))
----

com essas definções, basta seguir novamente os passos aplicando para cada frame do vídeo e salvar o frame.

.Configurações do Vídeo de Saída
[source,python,subs="+quotes"]
----
while cap.isOpened():

    ret, frame = cap.read()
    if not ret:
        break
    
    frame_cinza = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    laplaciano = cv2.filter2D(frame_cinza.astype(np.float32), -1, KERNEL_LAPLACIANO)
    mask = (laplaciano > max_laplaciano)
    max_laplaciano[mask] = laplaciano[mask]
    saida[mask] = frame[mask]

    out.write(saida)

cap.release()
out.release()
cv2.destroyAllWindows()
----

.Resultado do Efeito de Profundidade de Campo
video::Rpov3UFwUu0[Efeito de Profundidade de Campo]

Caso o vídeo não seja carregado, acesse o link: link:https://youtu.be/Rpov3UFwUu0[Efeito de Profundidade de Campo]

Script disponível em: link:../scripts/pratica09.py[Efeito de Profundidade de Campo]

Para executar o programa utilize o comando:
.Exemplo de comando de execução
----
python3 nome_arquivo.py caminho_video
----